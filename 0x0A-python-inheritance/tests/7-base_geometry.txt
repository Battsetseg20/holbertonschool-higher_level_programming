------------------------------------
Doctest for module 7-base_geometry.py
------------------------------------

Import module:
       >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Check instantiation:
--------------------------------------------------------
>>> bg = BaseGeometry()


>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented


Tests for integer validation:
---------------------------------------------------------
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


>>> bg.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'
Correct input should pass: value is an positive integer
----------------------------------------------------------
>>> bg.integer_validator("age", 1)


Following inputs should raise exceptions:
----------------------------------------------------------


>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: <name> must be greater than 0


>>> bg.integer_validator("age", -3)
Traceback (most recent call last):
ValueError: <name> must be greater than 0


>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", [1])
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", False)
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", {1,3})
Traceback (most recent call last):
TypeError: <name> must be an integer


>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: <name> must be an integer
